{"version":3,"sources":["tiny-timer.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["var mitt = require('mitt');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar mitt__default = /*#__PURE__*/_interopDefaultLegacy(mitt);\n\nclass Timer {\n  constructor({\n    interval = 1000,\n    stopwatch = false\n  } = {}) {\n    this._duration = 0;\n    this._endTime = 0;\n    this._pauseTime = 0;\n    this._status = 'stopped';\n    this._emitter = mitt__default['default']();\n\n    this.tick = () => {\n      if (this.status === 'paused') return;\n\n      if (Date.now() >= this._endTime) {\n        this.stop();\n\n        this._emitter.emit('tick', this._stopwatch ? this._duration : 0);\n\n        this._emitter.emit('done');\n      } else {\n        this._emitter.emit('tick', this.time);\n      }\n    };\n\n    this._interval = interval;\n    this._stopwatch = stopwatch;\n  }\n\n  start(duration, interval) {\n    if (this.status !== 'stopped') return;\n\n    if (duration == null) {\n      throw new TypeError('Must provide duration parameter');\n    }\n\n    this._duration = duration;\n    this._endTime = Date.now() + duration;\n\n    this._changeStatus('running');\n\n    this._emitter.emit('tick', this._stopwatch ? 0 : this._duration);\n\n    this._timeoutID = setInterval(this.tick, interval || this._interval);\n  }\n\n  stop() {\n    if (this._timeoutID) clearInterval(this._timeoutID);\n\n    this._changeStatus('stopped');\n  }\n\n  pause() {\n    if (this.status !== 'running') return;\n    this._pauseTime = Date.now();\n\n    this._changeStatus('paused');\n  }\n\n  resume() {\n    if (this.status !== 'paused') return;\n    this._endTime += Date.now() - this._pauseTime;\n    this._pauseTime = 0;\n\n    this._changeStatus('running');\n  }\n\n  _changeStatus(status) {\n    this._status = status;\n\n    this._emitter.emit('statusChanged', this.status);\n  }\n\n  get time() {\n    if (this.status === 'stopped') return 0;\n    const time = this.status === 'paused' ? this._pauseTime : Date.now();\n    const left = this._endTime - time;\n    return this._stopwatch ? this._duration - left : left;\n  }\n\n  get duration() {\n    return this._duration;\n  }\n\n  get status() {\n    return this._status;\n  }\n\n  on(eventName, handler) {\n    this._emitter.on(eventName, handler);\n  }\n\n  off(eventName, handler) {\n    this._emitter.off(eventName, handler);\n  }\n\n}\n\nmodule.exports = Timer;\n//# sourceMappingURL=tiny-timer.js.map\n"]}